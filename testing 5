import tkinter as tk
from tkinter import messagebox
import requests

class CrowdAwareApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Smart Crowd Guide")
        self.root.geometry("600x600")
        self.root.resizable(False, False)

        self.locations = [tk.StringVar() for _ in range(3)]
        self.crowd_counts = [tk.IntVar(value=0) for _ in range(3)]
        self.expected_counts = [tk.IntVar(value=50) for _ in range(3)]  # Simulated expected count

        self.location_frames = []
        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.root, text="Smart Crowd Guide", font=("Helvetica", 24, "bold"), fg="white").pack(pady=15)

        self.input_frame = tk.Frame(self.root)
        self.input_frame.pack(pady=10)

        for i in range(3):
            frame = tk.Frame(self.input_frame, bd=2, relief="ridge", padx=10, pady=5)
            frame.grid(row=i, column=0, pady=5, padx=10, sticky='we')
            self.location_frames.append(frame)

            tk.Label(frame, text=f"Location {i+1}:", font=("Arial", 12)).grid(row=0, column=0, sticky='e')
            tk.Entry(frame, textvariable=self.locations[i], width=20, font=("Arial", 12)).grid(row=0, column=1, padx=5)
            tk.Label(frame, text="People:", font=("Arial", 12)).grid(row=0, column=2, sticky='e')
            tk.Entry(frame, textvariable=self.crowd_counts[i], width=5, font=("Arial", 12)).grid(row=0, column=3, padx=5)
            tk.Label(frame, text="Expected:", font=("Arial", 12)).grid(row=0, column=4, sticky='e')
            tk.Entry(frame, textvariable=self.expected_counts[i], width=5, font=("Arial", 12)).grid(row=0, column=5, padx=5)

        tk.Button(self.root, text="Fetch Live Counts", command=self.fetch_live_counts, font=("Arial", 12), bg="#3399ff", fg="black").pack(pady=10)
        tk.Button(self.root, text="Find Best Option", command=self.suggest_best_location, font=("Arial", 12), bg="#33cc33", fg="black").pack(pady=5)

        self.result_label = tk.Label(self.root, text="", font=("Arial", 14), wraplength=500, justify="center", fg="#003366")
        self.result_label.pack(pady=20)

        tk.Label(self.root, text="Powered by AITRIOS Edge AI", font=("Arial", 9, "italic"), fg="gray").pack(side=tk.BOTTOM, pady=10)

    def fetch_live_counts(self):
        for i in range(3):
            loc = self.locations[i].get().strip()
            if loc:
                count = self.get_crowd_count_from_sensor(loc)
                self.crowd_counts[i].set(count)
        self.color_code_locations()

    def color_code_locations(self):
        ratios = [self.crowd_counts[i].get() / self.expected_counts[i].get() for i in range(3)]

        max_ratio = max(ratios)
        min_ratio = min(ratios)

        for i, ratio in enumerate(ratios):
            frame = self.location_frames[i]
            if ratio == max_ratio:
                frame.config(bg="#ffcccc")  # red for most crowded relative to expected
            elif ratio == min_ratio:
                frame.config(bg="#ccffcc")  # green for least crowded
            else:
                frame.config(bg="#ffffcc")  # yellow in between

    def get_crowd_count_from_sensor(self, location_name):
        try:
            url = f"https://aitrios-usitinker-260203.s3-website-us-east-1.amazonaws.com/api/crowd_count?location={location_name}"
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                return int(data.get("count", 0))
            else:
                print(f"Failed to fetch data for {location_name}: Status code {response.status_code}")
                return 0
        except Exception as e:
            print(f"Error fetching count for {location_name}: {e}")
            return 0

    def suggest_best_location(self):
        recommendations = []
        for i in range(3):
            loc = self.locations[i].get()
            actual = self.crowd_counts[i].get()
            expected = self.expected_counts[i].get()
            if loc and expected > 0:
                ratio = actual / expected
                if ratio < 1.0:
                    recommendations.append((loc, ratio))

        if not recommendations:
            self.result_label.config(text="All locations are currently at or above expected crowd levels.")
        else:
            msg = "Recommended locations:\n"
            for loc, ratio in sorted(recommendations, key=lambda x: x[1]):
                msg += f"- {loc} (occupancy ratio: {ratio:.2f})\n"
            self.result_label.config(text=msg.strip())

        self.color_code_locations()

if __name__ == "__main__":
    root = tk.Tk()
    app = CrowdAwareApp(root)
    root.mainloop()
